{"/home/travis/build/npmtest/node-npmtest-api-easy/test.js":"/* istanbul instrument in package npmtest_api_easy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-api-easy/lib.npmtest_api_easy.js":"/* istanbul instrument in package npmtest_api_easy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_api_easy = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_api_easy = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-api-easy/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-api-easy && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_api_easy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_api_easy\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_api_easy.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_api_easy.rollup.js'] =\n            local.assetsDict['/assets.npmtest_api_easy.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_api_easy.__dirname + '/lib.npmtest_api_easy.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-api-easy/node_modules/api-easy/lib/api-easy.js":"/*\n * api-easy.js: Top-level include for the api-easy module.\n *\n * (C) 2011, Charlie Robbins & the Contributors.\n *\n */\n\nvar assert = require('assert'),\n    fs = require('fs'),\n    path = require('path'),\n    qs = require('qs'),\n    request = require('request'),\n    vows = require('vows');\n\n//\n// ### Check for version info in `package.json`\n//\nexports.version = require('../package.json').version;\n\n//\n// ## APIeasy.describe(text, vowsSuite)\n// This is the main (and sole) entry point for APIeasy.\n// It responds with an object literal that manages an\n// underlying vows suite. Each call to `APIeasy.describe()`\n// will create a vows suite, with the corresponding `text`\n// passed to this method.\n//\nexports.describe = function (text) {\n  return {\n    //\n    // ### State / Context management:\n    //\n    // * `suite`: The underlying vows suite\n    // * `discussion`: Ordered list containing the set of text to use before each test\n    // * `outgoing`: Shared options to be passed to the `request` module on each test.\n    // * `befores`: Mapping of named functions to execute before each test to modify the\n    //             outgoing request options.\n    // * `options`: Various configuration options for managing nuances of state / scope.\n    // * `paths`: The set of paths representing the location of the current resource /\n    //            API method being tested by this object.\n    // * `batch`: The object literal representing the current batch of vows tests to\n    //            eventually be pass to vows `.addBatch()`.\n    // * `batches`: The set of all batches that have been added to the vows `suite`\n    //              associated with this object.\n    //\n    suite: vows.describe(text),\n    discussion: [],\n    outgoing: {\n      headers: {}\n    },\n    befores: {},\n    options: {},\n    paths: [],\n    batch: {},\n    batches: [],\n\n    //\n    // ### Add and Remove BDD Discussion\n    // Simple pathing for adding contextual description to sets of tests.\n    // Each call to discuss will create an object in the nested vows\n    // structure which has that text as the key in the parent. **e.g.:**\n    //\n    //     APIeasy.describe('your/awesome/api')\n    //             .use('localhost', 8080)\n    //             .discuss('When using your awesome API')\n    //               .discuss('and an awesome resource')\n    //               .path('/awesome-resource')\n    //                 .get().expect(200)\n    //               .undiscuss().unpath()\n    //               .discuss('and a super resource')\n    //               .path('/super-resource')\n    //                 .get().expect(404);\n    //\n    discuss: function (text) {\n      this.discussion.push(text);\n      return this;\n    },\n    undiscuss: function (length) {\n      length = length || 1;\n      this.discussion.splice(-1 * length, length);\n      return this;\n    },\n\n    //\n    // ### Setup Remote API Location / Options\n    // Configure the remote `host`, `port`, and miscellaneous\n    // `options` of the API that this suite is testing.\n    //\n    use: function (host /* [port, options] */) {\n      var args = Array.prototype.slice.call(arguments),\n          options = typeof args[args.length - 1] === 'object' ? args.pop() : {},\n          port = args[1];\n\n      this.host   = host || 'localhost';\n      this.port   = port || 80;\n      this.secure = options.secure || false;\n      this.auth   = options.auth;\n\n      //\n      // **TODO _(indexzero)_:** Setup `this.options` here (i.e. options for the SUITE, not the REQUEST)\n      // _What are useful options to expose?_\n      //\n\n      return this;\n    },\n    //\n    // ### Configure Basic Authentication\n    //\n    authenticate: function (username, password) {\n      this.auth = password ? (username + ':' + password) : username;\n      return this;\n    },\n    unauthenticate: function () {\n      this.auth = null;\n      return this;\n    },\n    //\n    // ### Configure Headers\n    // Manipulate the HTTP headers that are sent to your API using these methods.\n    // They are designed to mimic the node.js core HTTP APIs.\n    //\n    setHeaders: function (headers) {\n      this.outgoing.headers = headers;\n      return this;\n    },\n    setHeader: function (key, value) {\n      this.outgoing.headers[key] = value;\n      return this;\n    },\n    getHeader: function (key) {\n      return this.outgoing.headers[key];\n    },\n    removeHeader: function (key, value) {\n      delete this.outgoing.headers[key];\n      return this;\n    },\n\n    //\n    // ### Manipulate Base Path\n    // Control the base path used for a given test in this suite. Append a path\n    // by calling `.path()`. Remove the last `num` paths from the suite by calling\n    // `.unpath(num)`. Set the root path using `.root(path)`\n    //\n    path: function (uri) {\n      this.paths.push(uri.replace(/^\\/|\\/$/ig, ''));\n      return this;\n    },\n    unpath: function (length) {\n      length = length || 1;\n      this.paths.splice(-1 * length, length);\n      return this;\n    },\n    root: function (path) {\n      this.paths = [path];\n      return this;\n    },\n\n    //\n    // ### Dynamically set Outgoing Request Options\n    // Often it is necessary to set some HTTP options conditionally or based on\n    // results of a dynamic and/or asynchronous operation. A call to `.before()`\n    // will enqueue a function that will modify the outgoing request options\n    // before the request is made for all tests on the suite.\n    //\n    before: function (name, fn) {\n      this.befores[name] = fn;\n      return this;\n    },\n    unbefore: function (name) {\n      delete this.befores[name];\n      return this;\n    },\n\n    //\n    // ### Add HTTP Request-based Tests\n    // The `.get()`, `.post()`, `.put()`, `.del()`, `.patch()` and `.head()`\n    // methods add a new context and topic to the vows structure maintained\n    // by this APIeasy suite. The nuts and bolts of this are in the \"private\"\n    // method `_request()`.\n    //\n    // Each method invocation returns the suite itself so that\n    //`.expect()` and other assertion method(s) can be called\n    // afterwards to add assertions to this context.\n    //\n    get: function (/* [uri, params] */) {\n      var args = Array.prototype.slice.call(arguments);\n      args.splice(1, -1, null);\n      return this._request.apply(this, ['get'].concat(args));\n    },\n    post: function (/* [uri, data, params] */) {\n      var args = Array.prototype.slice.call(arguments);\n      return this._request.apply(this, ['post'].concat(args));\n    },\n    put: function (/* [uri, data, params] */) {\n      var args = Array.prototype.slice.call(arguments);\n      return this._request.apply(this, ['put'].concat(args));\n    },\n    patch: function (/* [uri, data, params] */) {\n      var args = Array.prototype.slice.call(arguments);\n      var req = this._request.apply(this, ['patch'].concat(args));\n      return req;\n    },\n    del: function (/* [uri, data, params] */) {\n      var args = Array.prototype.slice.call(arguments);\n      return this._request.apply(this, ['delete'].concat(args));\n    },\n    head: function (/* [uri, params] */) {\n      var args = Array.prototype.slice.call(arguments);\n      args.splice(1, -1, null);\n      return this._request.apply(this, ['head'].concat(args));\n    },\n    uploadFile: function (/* [uri, filepath, filePartName, data] */) {\n      var args = Array.prototype.slice.call(arguments),\n          filepath = args.splice(1, 1),\n          filePartName = args.splice(1, 1),\n          data = args.splice(1, 1),\n          filename = path.basename(filepath);\n      args.push(function (outgoing, callback) {\n        //\n        // TODO replace request/multipart with better implementation with\n        // low memory consumption\n        //\n        fs.readFile(filepath[0], function (err, fileData) {\n          var multipart = outgoing.multipart = [];\n          if(data && data.length){\n            Object.keys(data[0]).forEach(function(key){\n              var value = data[0][key];\n              multipart.push({\n                'Content-Disposition': 'form-data; name=\"' + key + '\"',\n                body: value\n              });\n            });\n          }\n\n          multipart.push({\n              'content-type': 'application/octet-stream',\n              'Content-Transfer-Encoding': 'binary',\n              'Content-Disposition': 'form-data; name=\"' + filePartName + '\"; filename=\"' + filename + '\"',\n              'body': fileData\n          });\n\n          request(outgoing, callback);\n        });\n      });\n\n      return this._request.apply(this, ['post'].concat(args));\n    },\n\n    //\n    // ### Add Test Assertions\n    // Add test assertions with `.expect()`. There are a couple of options here:\n    //\n    // 1. Assert a response code: `suite.expect(200)`\n    // 2. Assert a JSON result: `suite.expect({ some: 'value' })`\n    // 3. Use a custom assertion: `suite.expect('should be custom', function (err, res, body) { ... })`\n    //\n    expect: function (/* [text, code, result, assert] */) {\n      var args = Array.prototype.slice.call(arguments),\n          text, code, result, test, context;\n\n      args.forEach(function (arg) {\n        switch (typeof(arg)) {\n          case 'number': code = arg; break;\n          case 'string': text = arg; break;\n          case 'object': result = arg; break;\n          case 'function': test = arg; break;\n        }\n      });\n\n      context = this._currentTest(this.current);\n\n      // When using a custom test assertion function, both the assertion function\n      // and a description are required or else we have no key in the JSON structure to use.\n      if (text && !test || test && !text) {\n        throw new Error('Both description and a custom test are required.');\n      }\n\n      // Setup the custom test assertion if we have the appropriate arguments.\n      if (text && test) {\n        context[text] = function (err, res, body) {\n          assert.isNull(err);\n          test.apply(context, arguments);\n        };\n      }\n\n      // Setup the response code test assertion if we have the appropriate arguments.\n      if (code) {\n        context['should respond with ' + code] = function (err, res, body) {\n          assert.isNull(err);\n          assert.equal(res.statusCode, code);\n        };\n      }\n\n      // Setup the JSON response assertion if we have the appropriate arguments.\n      if (result) {\n        context['should respond with ' + JSON.stringify(result).substring(0, 50)] = function (err, res, body) {\n          //\n          // Pass any and all errors from parsing and asserting\n          // the JSON returned to the underlying `vows` suite.\n          //\n          assert.isNull(err);\n          var testResult = JSON.parse(body);\n          assert.deepEqual(testResult, result);\n        };\n      }\n\n      return this;\n    },\n\n    //\n    // Create some helper methods for setting important options\n    // that will be later passed to `request`.\n    //\n    followRedirect: function (follow) {\n      this.outgoing.followRedirect = follow;\n      return this;\n    },\n    maxRedirects: function (max) {\n      this.outgoing.maxRedirects = max;\n      return this;\n    },\n\n    //\n    // ### Perform Sequential Tests Easily\n    // Since this object literal is designed to manage a single vows suite,\n    // we need a way to add multiple batches to that suite for performing\n    // sequential tests. This is precisely what `.next()` does. It will:\n    //\n    // 1. Add the current batch (or 'vows'), `this.batch`, to the vows suite\n    // 2. Add this same batch to the set of batches on `this.batches`\n    // 3. Create a new empty object literal to use for `this.batch`.\n    // 4. Reset the context for the `this.current` test.\n    //\n    next: function () {\n      this.suite.addBatch(this.batch);\n      this.batches.push(this.batch);\n      this.batch = {};\n      this.current = '';\n      return this;\n    },\n\n    //\n    // ### Run Your Tests\n    // Again, since we are managing a single vows suite in this object we\n    // should expose an easy way to export your tests to a given target without\n    // needing to call `apiEasySuite.suite.export(module)`. You should only\n    // call this method once in a given test file.\n    //\n    // The method exportTo(module) is provided as an alias to export(module)\n    // if you want to avoid using the reserved JavaScript `export` word\n    //\n    // You can also call `.run()` which will run the specified suite just\n    // as if you were using vows directly.\n    //\n    export: function (target) {\n      if (this.batch) {\n        this.next();\n      }\n\n      this.suite.export(target);\n      return this;\n    },\n    exportTo: function (target) {\n      return this.export(target);\n    },\n    run: function (options, callback) {\n      if (this.batch) {\n        this.next();\n      }\n\n      if (!callback) {\n        callback = options;\n        options = {};\n      }\n\n      this.suite.run(options, callback);\n      return this;\n    },\n\n    // ### Use Vows from APIeasy\n    //extrapolating this allows us to add our own custom methods.\n    inheritedMethods: ['get', 'post', 'del', 'put', 'patch', 'head', 'uploadFile'],\n    addBatch : function () {\n      if (this.batch) {\n        this.next();\n      }\n\n      //\n      // injects `easy` methods into vows' suite to be able\n      // to switch back to APIEasy context\n      //\n      var self = this;\n\n      this.inheritedMethods.forEach(function (methodName) {\n        if (typeof self.suite[methodName] === 'undefined') {\n          self.suite[methodName] = function () {\n            return self[methodName].apply(self, arguments);\n          }\n        }\n      });\n\n      this.suite.addBatch.apply(this.suite, arguments);\n      return this;\n    },\n\n    //\n    // ### Helpers and Utilities\n    // `_request()` exists for the sake of DRY and simplicity and is designed to handle\n    // a variety of interal usage(s) exposed indirectly through the `.get()`,\n    // `.post()`, `.put()`, `.del()` and `.head()`. Nothing to see here unless you're\n    // interested in improving APIeasy itself.\n    //\n    _request: function (/* method [uri, data, params] */) {\n      var self    = this,\n          args    = Array.prototype.slice.call(arguments),\n          method  = args.shift(),\n          uri     = typeof args[0] === 'string' && args.shift(),\n          data    = typeof args[0] === 'object' && args.shift(),\n          params  = typeof args[0] === 'object' && args.shift(),\n\n          // custom request implementation function (outgoing, callaback),\n          // should invoke callback(err, response, body) once done\n          requestImpl = typeof args[0] === 'function' && args.shift(),\n          port    = this.port && this.port !== 80 ? ':' + this.port : '',\n          outgoing = clone(this.outgoing),\n          fullUri, context;\n\n      //\n      // Update the fullUri for this request with the passed uri\n      // and the query string parameters (if any).\n      //\n      fullUri = distillPath(uri ? this.paths.concat([uri]) : this.paths);\n\n      //\n      // Append the query string parameters to the `fullUri`. It's worth mentioning\n      // here that if only a single object is provided to `_request()` it will assume\n      // that it is the request body, not the params hash.\n      //\n      if (params) {\n        fullUri += '?' + qs.stringify(params);\n      }\n\n      //\n      // If the user has provided data, assume that it is JSON\n      // and set it to the `body` property of the options.\n      //\n      // **TODO _(indexzero)_**: Expose more properties available by the\n      // [request module](http://github.com/mikeal/request)\n      //\n      if (data) {\n        if (this.outgoing.headers['Content-Type'] == 'application/x-www-form-urlencoded') {\n          outgoing.body = qs.stringify(data);\n        }\n        else if (this.outgoing.headers['Content-Type'] == 'application/json') {\n          outgoing.body = JSON.stringify(data);\n        }\n        else {\n          outgoing.body = data;\n        }\n      }\n\n      //\n      // Set the `uri` and `method` properties of the request options `outgoing`\n      // using the information provided to this instance and `_request()`.\n      //\n      outgoing.uri = this.secure ? 'https://' : 'http://';\n      outgoing.uri += this.auth ? this.auth + '@' : '';\n      outgoing.uri += this.host + port + fullUri;\n      outgoing.method = method;\n\n      //\n      // Create the description for this test. This is currently static.\n      // **Remark _(indexzero)_**: Do users care if these strings are configurable?\n      //\n      this.current = ['A', method.toUpperCase(), 'to', fullUri].join(' ');\n      context = this._currentTest();\n\n      //\n      // Add the topic for the specified request to the context of the current\n      // batch used by this suite.\n      //\n      context[this.current] = {\n        topic: function () {\n          //\n          // Before making the outgoing HTTP request for this topic, execute\n          // all known before funtions available to this suite. These functions\n          // are by definition synchronous add vows before a given test if\n          // this data is fetched asynchronously.\n          //\n          Object.keys(self.befores).forEach(function (name) {\n            outgoing = self.befores[name](outgoing);\n          });\n\n          if (requestImpl)\n            requestImpl(outgoing, this.callback);\n          else\n            request(outgoing, this.callback);\n        }\n      };\n\n      //\n      // Set the outgoing request options and set of before functions on the topic.\n      // This is used for test assertions, general consistency, and basically\n      // just knowing what every topic does explicitly.\n      //\n      context[this.current].topic.outgoing = outgoing;\n      context[this.current].topic.before   = this.befores;\n\n      return this;\n    },\n\n    //\n    // The vows data structure is read as a sentence constructred by\n    // keys in a nested JSON structure. This helper method is designed to\n    // get the current test context (i.e. object) by nesting into the\n    // JSON structure using this convention.\n    //\n    _currentTest: function (text) {\n      var last = this.batch;\n\n      // Nest into the batch JSON structure using the current `discussion` text.\n      this.discussion.forEach(function (text) {\n        if (typeof last[text] !== 'object') {\n          last[text] = {};\n        }\n\n        // Capture the nested object\n        last = last[text];\n      });\n\n      return text ? last[text] : last;\n    }\n  };\n};\n\n//\n// A simple function that performs a deep clone on the specified `obj`.\n// We use this in APIeasy to create multiple copies of the `options`\n// passed to `request` because they are considered mutable by `request`\n// and we strive to make each request idempotent.\n//\nfunction clone (obj) {\n  var copy = {};\n  for (var i in obj) {\n    if (Array.isArray(obj[i])) {\n      copy[i] = obj[i].slice(0);\n    }\n    else {\n      copy[i] = obj[i] instanceof Object ? clone(obj[i]) : obj[i];\n    }\n  }\n\n  return copy;\n}\n\n//\n// Helper function used to join nested paths created by\n// multiple calls to `.path()`.\n//\n//     suite.path('/a-path')\n//          .path('/hey-another-path')\n//          .path(...)\n//\nfunction distillPath (paths) {\n  return '/' + paths.map(function (p) {\n    return encodeURI(p.replace(/^\\/|\\/$/ig, ''));\n  }).join('/');\n}\n"}